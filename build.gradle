plugins {
    id 'scala'
    id 'java'
    id 'idea'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

repositories {
    mavenCentral()
}

group = 'my.spark.playground'
version = '0.2.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.named('compileScala') {
    logging.captureStandardOutput LogLevel.DEBUG

    scalaCompileOptions.additionalParameters = [
            "-deprecation", // Emit warning and location for usages of deprecated APIs.
            "-encoding",
            "utf-8", // Specify character encoding used by source files.
            "-explaintypes", // Explain type errors in more detail.
            "-feature", // Emit warning and location for usages of features that should be imported explicitly.
            "-language:existentials", // Existential types (besides wildcard types) can be written and inferred
            "-language:experimental.macros", // Allow macro definition (besides implementation and application)
            "-language:higherKinds", // Allow higher-kinded types
            "-language:implicitConversions", // Allow definition of implicit functions called views
            "-unchecked", // Enable additional warnings where generated code depends on assumptions.
            "-Xcheckinit", // Wrap field accessors to throw an exception on uninitialized access.
            "-Xfatal-warnings", // Fail the compilation if there are any warnings.
            "-Xlint:adapted-args", // Warn if an argument list is modified to match the receiver.
            "-Xlint:delayedinit-select", // Selecting member of DelayedInit.
            "-Xlint:inaccessible", // Warn about inaccessible types in method signatures.
            "-Xlint:infer-any", // Warn when a type argument is inferred to be `Any`.
            "-Xlint:missing-interpolator", // A string literal appears to be missing an interpolator id.
            "-Xlint:nullary-unit", // Warn when nullary methods return Unit.
            "-Xlint:option-implicit", // Option.apply used implicit view.
            "-Xlint:package-object-classes", // Class or object defined in package object.
            "-Xlint:poly-implicit-overload", // Parameterized overloaded implicit methods are not visible as view bounds.
            "-Xlint:private-shadow", // A private field (or class parameter) shadows a superclass field.
            "-Xlint:stars-align", // Pattern sequence wildcard must align with sequence component.
            "-Xlint:type-parameter-shadow", // A local type parameter shadows a type already in scope.
            "-Xlog-reflective-calls", // Print a message when a reflective method call is generated
            "-Ywarn-dead-code", // Warn when dead code is identified.
            "-Ywarn-value-discard", // Warn when non-Unit expression results are unused.
            "-Xlint:constant", // Evaluation of a constant arithmetic expression results in an error.
            "-Ywarn-extra-implicit", // Warn when more than one implicit parameter section is defined.
            "-Ywarn-macros:after", // Fixes false warnings associated with generic derivations
            "-Ywarn-unused:implicits", // Warn if an implicit parameter is unused.
            "-Ywarn-unused:imports", // Warn if an import selector is not referenced.
            "-Ywarn-numeric-widen", // Warn when numerics are widened.
            "-Ywarn-unused:locals", // Warn if a local definition is unused.
            "-Ywarn-unused:params", // Warn if a value parameter is unused.
            "-Ywarn-unused:patvars", // Warn if a variable bound in a pattern is unused.
            "-Ywarn-unused:privates", // Warn if a private member is unused.
            "-Ycache-plugin-class-loader:last-modified", // Enables caching of classloaders for compiler plugins
            "-Ycache-macro-class-loader:last-modified" // and macro definitions. This can lead to performance improvements.
    ]
}

def scalaMajor = '2.12'
def scalaMinor = '14'

def sparkVersion = '3.1.2'

dependencies {
    implementation group: 'org.scala-lang', name: 'scala-library', version: "$scalaMajor.$scalaMinor"

    implementation "org.apache.spark:spark-core_$scalaMajor:${sparkVersion}"
    implementation "org.apache.spark:spark-sql_$scalaMajor:${sparkVersion}"

    implementation 'com.google.guava:guava:23.0'
    implementation group: 'io.spray', name: "spray-json_$scalaMajor", version: '1.3.6'
    implementation group: 'net.virtual-void', name: "json-lenses_$scalaMajor", version: '0.6.2'

    implementation group: 'dev.zio', name: "zio_$scalaMajor", version: '1.0.9'
}

def mainClassNameStr = 'my.spark.playground.Main2'

application {
    mainClass = mainClassNameStr
//    applicationDefaultJvmArgs = ['-Dlanguage=en']
}

shadowJar {
    mainClassName = mainClassNameStr
    archiveBaseName.set('my-spark-playground')
    archiveClassifier.set('')
//    archiveVersion.set('')
}
